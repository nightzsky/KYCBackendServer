import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import javax.xml.bind.DatatypeConverter;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)

/**
 * Class that runs tests on the AES and RSA cryptographic implementations in Java
 */
public class JavaCryptoTest {
    String input;

    public JavaCryptoTest(String input){
        this.input = input;
    }

    @Parameterized.Parameters
    public static Collection<String> parameters(){
        ArrayList<String> inputs = new ArrayList<>();
        //generate 100 random inputs
        for (int i = 0; i < 1000; i++){
            inputs.add(RandomInput.randomString());
        }
        //also test empty string
        inputs.add("");
        return inputs;
    }

    /**
     * Tests the AES encryption function by encrypting 1000 random inputs, then decrypting them
     * The test succeeds if the output of the process is the same as the input
     * The key used for encryption is also randomly generated
     */
    @Test
    public void testAes(){
        SecureRandom sr = new SecureRandom();
        byte[] key = new byte[16];
        sr.nextBytes(key);
        byte[] cipherText = BlocktraceCrypto.aesEncrypt(input, key);
        String output = BlocktraceCrypto.aesDecrypt(cipherText,key);
        assertEquals(input, output);
    }

    /**
     * Tests the RSA encryption function using the same logic as the AES test
     */
    @Test
    public void testRSA(){
        KeyPairGenerator keyGen = null;
        try {
            keyGen = KeyPairGenerator.getInstance("RSA");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        keyGen.initialize(2048);
        KeyPair keyPair = keyGen.generateKeyPair();
        byte[] publicKey = keyPair.getPublic().getEncoded();
        byte[] privateKey = keyPair.getPrivate().getEncoded();

        //convert key to format that is generated by python, so that the conversion can be tested
        String publicKeyString = DatatypeConverter.printBase64Binary(publicKey);
        publicKeyString = "-----BEGIN PUBLIC KEY-----" + publicKeyString + "-----END PUBLIC KEY-----";
        String privateKeyString = DatatypeConverter.printBase64Binary(privateKey);
        privateKeyString = "-----BEGIN PRIVATE KEY-----" + privateKeyString + "-----END PRIVATE KEY-----";

        byte[][] cipherText = BlocktraceCrypto.rsaEncrypt(input, BlocktraceCrypto.pemToBytes(publicKeyString));
        String output = BlocktraceCrypto.rsaDecrypt(cipherText, BlocktraceCrypto.pemToBytes(privateKeyString));

        assertEquals(input,output);
    }
}
